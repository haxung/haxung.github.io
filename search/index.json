[{"content":"引言 安装 使用 总结 ","date":"2023-05-02T23:04:59+08:00","permalink":"https://haxung.github.io/p/git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","title":"Git 常用操作"},{"content":"引言 Hugo 是一个用Go语言实现的静态网站生成器。它简单、易用、高效、易扩展、快速部署。 确切地说，Hugo 是一个把符合规则的 markdown 文档转为静态网站的 html、css 等文件的工具。\nHugo 作为当前最流行的开源静态站点生成器之一，以其惊人的速度和灵活性，使得搭建个人博客再次变得简便、快捷、有趣。 Hugo 的构建速度非常快，每页小于 1 毫秒，平均站点在不到一秒钟内构建完成。 Hugo 支持无限的内容类型、分类法、菜单、动态 API 驱动内容等，而且无需插件。 Hugo 还提供了内置模板，可以快速完成 SEO、评论、分析等功能。它还支持多语言和 i18n，可以轻松构建多语言站点。 此外，Hugo 还支持自定义输出格式，包括 JSON 或 AMP，并且可以轻松创建自己的输出格式。 它还提供了 300 多种主题，并且具有强大的模板系统，可以轻松实现复杂的网站。\n安装 Hugo 也非常简单，可以在 macOS、Windows、Linux、FreeBSD 等操作系统上运行，并且可以托管在任何服务器或 CDN 上。\n安装 创建站点 主题和模板：介绍Hugo的主题系统，如何选择和安装主题，以及如何使用模板定制网站 多语言支持：介绍Hugo如何支持多语言站点 自定义输出格式：介绍Hugo如何支持自定义输出格式，包括JSON和AMP等 部署Hugo站点：介绍如何将Hugo站点部署到服务器或CDN上 结论：总结Hugo的优点和特点，鼓励读者尝试使用Hugo ","date":"2023-05-02T16:05:32+08:00","permalink":"https://haxung.github.io/p/hugo-%E7%AE%80%E4%BB%8B/","title":"Hugo 简介"},{"content":"基础操作 在介绍 MySQL 基础操作前，需要先安装 MySQL 。\nLinux 系统安装 MySQL\n1 2 3 4 5 6 7 8 # debian, ubuntu sudo apt update \u0026amp;\u0026amp; sudo apt install mysql # centos 7 yum update \u0026amp;\u0026amp; install mysql # centos 8, rocky linux dnf update \u0026amp;\u0026amp; dnf install mysql Windows 安装 MySQL 官网下载 msi 软件，一步步安装（可以参考菜鸟教程）。\nDocker 安装 MySQL 官方镜像\n1 2 3 4 5 docker serach mysql docker pull mysql:latest docker run --name mysql-study -e MYSQL_ROOT_PASSWORD=\u0026#34;\u0026lt;ENTER YOUR PASSWORD\u0026gt;\u0026#34; -d mysql:latest docker container ls docker logs mysql-study 数据库操作 下面将创建数据库 mysql_test，在此数据库下创建数据表 test，然后进行一系列的数据库操作。\n连接 MySQL Server\n1 2 3 4 5 # 使用容器时需要先进入容器内 docker exec -it mysql-study /bin/bash `MySQL` -u root -p \u0026lt;ENTER YOUR PASSWORD\u0026gt; 进入 MySQL Server 后每条指令都需要以 ; 作为指令结束的标志。\n查看帮助\n1 HELP; 查看数据库\n1 SHOW databases; 创建数据库\n1 2 3 4 CREATE DATABASE test01; # 设置数据库编码和排序方式，可以在库级别设置，也可以在表级别设置 CREATE DATABASE test01 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; SHOW databases; 查看库编码格式\n1 2 3 4 5 6 7 # 查看单个数据库 SELECT default_character_set_name, default_collation_name FROM information_schema.schemata WHERE schema_name = \u0026#39;test01\u0026#39;; # 查看所有数据库 SELECT schema_name, default_character_set_name, default_collation_name FROM information_schema.schemata; 设置或更新库编码格式\n1 ALTER DATABASE test01 CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci; 重命名数据库\nMySQL 5.1 版本之前可以使用\n1 RENAME DATABASE test01 TO mysql_test; 建新库，重命名表名，删除老库\n1 2 3 4 CREATE DATABASE mysql_test CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci; # test01 中所有的表名都要更改，相当于将表从 test01 移动到 mysql_test RENAME TABLE test01.tb TO mysql_test.tb; DROP DATABASE test01; 建新表，导出老表，导入新表，删除老表\n1 CREATE DATABASE mysql_test CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci; 1 2 mysqldump -u root -p\u0026lt;ENTER YOUR PASSWORD\u0026gt; --set-gtid-purged=OFF test01 \u0026gt; /tmp/test01.sql mysqldump -u root -p\u0026lt;ENTER YOUR PASSWORD\u0026gt; mysql_test \u0026lt; /tmp/test01.sql 1 DROP DATABASE test01; 尽量不要变更数据库名称！！！\n数据表操作 创建数据表\n1 2 3 4 5 6 7 8 9 10 CREATE TABLE mysql_test.test ( id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) NOT NULL, gender BOOLEAN, address TEXT, birth DATE COMMENT \u0026#39;format just like 1970-01-01\u0026#39;, description VARCHAR(255), create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, update_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE = InnoDB CHARSET = utf8mb4; 表级别编码方式高于库级别编码方式。\nMySQL 有多种存储引擎，各有优缺点。其中，最常用的两种存储引擎是 InnoDB 和 MyISAM。\nInnoDB 是 MySQL 5.5 及以后版本中的默认存储引擎。它支持事务、使用行级锁、支持外键关联、支持热备份等特性，容灾性强，能够在崩溃后安全恢复。 MyISAM 则不支持事务、使用表级锁、并发性差、主机宕机后易损坏、灾难恢复性不佳。但是，它可以配合锁实现操作系统下的复制备份、迁移，数据紧凑存储，因此可获得更小的索引和更快的全表扫描性能。 总之，InnoDB 更适合写密集的表，而 MyISAM 更适合读密集的表。\n查看建表语句\n1 SHOW CREATE TABLE mysql_test.test; 查看数据表结构\n1 2 3 DESCRIBE mysql_test.test; SHOW COLUMNS FROM mysql_test.test; 设置或更新存储引擎\n1 2 ALTER TABLE mysql_test.test ENGINE = MyISAM; ALTER TABLE mysql_test.test ENGINE = InnoDB; 设置或更新编码\n1 ALTER TABLE mysql_test.test CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; 重命名表名\n1 2 RENAME TABLE mysql_test.test TO mysql_test.test01; RENAME TABLE mysql_test.test01 TO mysql_test.test; 添加列\n1 ALTER TABLE mysql_test.test ADD COLUMN description TEXT; TEXT 类型 IO 性能较差，适合存储大文本数据。\n更改列\n1 ALTER TABLE mysql_test.test CHANGE COLUMN address address VARCHAR(255) NOT NULL COMMENT \u0026#39;address in id card\u0026#39;; 删除列\n1 ALTER TABLE mysql_test.test DROP COLUMN description; 删除数据表\n1 DROP TABLE mysql_test.test; 字段操作 添加主键\n1 2 3 ALTER TABLE mysql_test.test ADD CONSTRAINT ID PRIMARY KEY (id); # 也可以变更列属性 ALTER TABLE mysql_test.test CHANGE COLUMN id id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY; CONSTRAINT ID 的意思是为主键取个名称 ID。\n删除主键\n1 2 3 # 对于自增主键，必须先去掉自增属性，才能删除主键属性 ALTER TABLE mysql_test.test MODIFY id BIGINT UNSIGNED NOT NULL; # 尽量只删除自增属性 ALTER TABLE mysql_test.test DROP PRIMARY KEY; 一张表只能有一个主键，主键自带唯一性且不能为空 主键应当不影响业务逻辑，也不应该更新主键值\n添加索引\n1 2 3 4 # 添加索引 ALTER TABLE mysql_test.test ADD INDEX name (name); # 添加唯一索引 ALTER TABLE mysql_test.test ADD UNIQUE INDEX (name); 删除索引\n1 ALTER TABLE mysql_test.test DROP INDEX name; 添加索引能够加快检索速度，唯一索引确保数据唯一性，索引可以为空 考虑到会建立多个索引，可以为每个索引添加名称（名称不可以重复），不添加时默认使用列名\n添加联合索引\n1 2 3 4 # 添加联合索引 ALTER TABLE mysql_test.test ADD INDEX name_address (name, address); # 添加唯一联合索引 ALTER TABLE mysql_test.test ADD UNIQUE INDEX name_address (name, address); 删除联合索引\n1 ALTER TABLE mysql_test.test DROP INDEX name_address; 联合索引名称需要与列名称相关，最好能够望名知义 联合索引的排序和查询都是按照字段的先后顺序进行的，所以让数据重复概率低，字符短，经常使用的列排在联合索引的最左边 联合索引遵循最左前缀匹配原则，即查询条件中只能使用索引的最左侧部分 增删改查操作 增加数据\n1 INSERT INTO mysql_test.test (name, address) VALUES (\u0026#39;张三\u0026#39;, \u0026#39;JX\u0026#39;); 只能使用单引号，不能使用双引号\n查询数据\n1 2 3 4 5 6 7 8 9 10 # 查询表中所有数据 SELECT * FROM mysql_test.test; # 查询表中单列所有数据 SELECT name FROM mysql_test.test; # 条件查询 SELECT name, address FROM mysql_test.test WHERE id = 1; # 多条件查询 SELECT name, address FROM mysql_test.test WHERE id = 1 AND gender = false; # 按 id 升序排序，从 id\u0026gt;0 的数据中查询前 10 条数据，不足 10 条时返回所有数据 SELECT name, gender, address FROM mysql_test.test WHERE id \u0026gt; 0 ORDER BY id LIMIT 10; 更新数据\n1 2 3 4 # 更新表中所有数据 UPDATE mysql_test.test SET gender = true; # 更新表中满足条件的数据 UPDATE mysql_test.test SET gender = true WHERE id = 1; 删除数据\n1 2 3 4 # 清空表中所有数据 DELETE FROM mysql_test.test; # 清空表中满足条件的数据 DELETE FROM mysql_test.test WHERE gender = true; ","date":"2023-04-05T21:47:40+08:00","permalink":"https://haxung.github.io/p/mysql-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/","title":"MySQL 基础操作"},{"content":"外键介绍 以学生为例，使用数据库 student：\n1 2 CREATE DATABASE IF NOT EXISTS `student` CHARACTER SET utf8mb4; USE `student`; 现在 student 数据库中已经有了一张表 info ，用于统计学生信息，表结构如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 DROP TABLE IF EXISTS `info`; CREATE TABLE `info` ( id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, number INTEGER UNSIGNED NOT NULL UNIQUE COMMENT \u0026#39;student id\u0026#39;, name VARCHAR(255) NOT NULL, gender BOOLEAN NOT NULL COMMENT \u0026#39;true MAN \u0026amp;\u0026amp; false WOMAN\u0026#39;, birth DATE NOT NULL, description VARCHAR(255), create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, update_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE = InnoDB CHARSET = utf8mb4; 此时，需要登记当前学期（第一学期）每位同学的语数英成绩，可以创建下表 first_term_score：\n1 2 3 4 5 6 7 8 9 10 11 12 DROP TABLE IF EXISTS `first_term_score`; CREATE TABLE `first_term_score` ( id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY, number INTEGER UNSIGNED NOT NULL UNIQUE COMMENT \u0026#39;student id\u0026#39;, chinese INTEGER UNSIGNED NOT NULL, math INTEGER UNSIGNED NOT NULL, english INTEGER UNSIGNED NOT NULL, create_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, update_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) ENGINE = InnoDB CHARSET = utf8mb4; 看上去表 first_term_score 没多大问题，但是这张表与上表 info 息息相关：first_term_score 表中的 number 字段依赖于 info 表中的 number 字段：即学号（学生）可以没有成绩，但成绩不能没有学号。\n实际上，在数据库中这个概念称为 外键(foreign key)，即 表 info 中 number 字段是表 first_term_score 的外键。info 称为主表，first_term_score 称为外表；表 info 中的 number 列称为参照列，表 first_term_score 中的 number 列称为外键列。外键有以下特性：\n参照列在主表中具有唯一性 (PRIMARY KEY 或者 UNIQUE) 虽然主表中的参照列和从表中的外键列都可以为空，但强烈建议主表中参照列设置为 NO NULL 主表参照列和从表外键列必须具有相同的数据类型，长度和精度 在删除主表中一条数据时，必须确保这条数据的外键值没有在从表中被使用（此为默认设置：ON DELETE NO ACTION 或者 ON DELETE RESTRICT） 当使用 ON DELETE CASCADE 时，删除主表中的一条数据会自动删除从表中关联该数据外键值的数据（请谨慎使用） 当使用 ON DELETE SET NULL 时，删除主表中的一条数据会设置从表中外键相关联的外键值为 NULL（请谨慎使用） 当使用 ON UPDATE CASCADE 时，更新主表的外键值会自动更新从表中使用此外键的外键值 外键列在从表中可以重复（即主表外键关联多条从表数据） 主从表可以建立双向外键关系，以此来确保数据在不同表之间的一致性和完整性 主表的参照列可以关联多张从表的外键列 表既可以有参照列，也可以有外键列 主表可以有多个参照列，从表可以有多个外键列 可以设置外键的外键，即从表中的外键列可以设置为另一张表（从表的从表）的外键。这被称为嵌套（nested）外键关系，或者也可以称之为级联（cascading）外键关系 外键列既可以是单列，也可以是多列联合，即联合唯一索引 如果表太多，外键关系太复杂，或许可以思考下换种方式来实现 外键使用 可以使用下面的命令为从表 first_term_score 添加外键约束：\n设置主表参照列为主键\n1 ALTER TABLE `info` ADD PRIMARY KEY number (number); 或者设置为唯一索引\n1 ALTER TABLE `info` ADD UNIQUE number (number); 或者变更字段属性（添加非空约束）\n1 2 3 ALTER TABLE `info` CHANGE COLUMN number number INTEGER UNSIGNED NOT NULL UNIQUE; 为从表外键列建立索引\n1 ALTER TABLE `first_term_score` ADD INDEX number (number); 或者建立唯一索引\n1 ALTER TABLE `first_term_score` ADD INDEX number (number); 设置从表外键约束\n1 2 3 4 ALTER TABLE `first_term_score` ADD CONSTRAINT number FOREIGN KEY (number) REFERENCES `info` (number) ON DELETE CASCADE ON UPDATE CASCADE; ","date":"2023-03-27T22:51:18+08:00","permalink":"https://haxung.github.io/p/mysql-%E5%A4%96%E9%94%AE%E4%BB%8B%E7%BB%8D/","title":"MySQL 外键介绍"}]