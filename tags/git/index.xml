<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on 时光随笔</title><link>https://haxung.github.io/tags/git/</link><description>Recent content in Git on 时光随笔</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 02 May 2023 23:04:59 +0800</lastBuildDate><atom:link href="https://haxung.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 简介</title><link>https://haxung.github.io/p/git-%E7%AE%80%E4%BB%8B/</link><pubDate>Tue, 02 May 2023 23:04:59 +0800</pubDate><guid>https://haxung.github.io/p/git-%E7%AE%80%E4%BB%8B/</guid><description>&lt;h2 id="引言">引言
&lt;/h2>&lt;p>Git 是一个用于管理项目源码的软件，可以用于：&lt;/p>
&lt;ul>
&lt;li>新建分支开发新功能（branch）&lt;/li>
&lt;li>回滚代码到指定版本（commit）&lt;/li>
&lt;li>同步本地代码和远程仓库（remote）&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装
&lt;/h2>&lt;ol>
&lt;li>下载安装 &lt;a class="link" href="https://git-scm.com/downloads" target="_blank" rel="noopener"
>here&lt;/a>&lt;/li>
&lt;li>命令行安装&lt;/li>
&lt;/ol>
&lt;h2 id="使用">使用
&lt;/h2>&lt;p>下面按 Git 功能来解释 Git 概念，以及一些简单的 Git 命令。&lt;/p>
&lt;p>现在有个新项目，需要依次实现 a、b、c三个功能。&lt;/p>
&lt;ul>
&lt;li>新功能开发&lt;/li>
&lt;/ul>
&lt;p>新功能很容易实现，新建项目 P，在项目 P 上开发功能 a&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mkdir Project // 项目名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> Project
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git init // 初始化，此时会有默认分支 master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>可以把项目理解为最初的起源（origin），每个分支（branch）代表项目的一种可能性，分分支与分支间彼此隔离互不干扰。&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>变更项目需求，优先开发功能 b&lt;/li>
&lt;/ul>
&lt;p>此时功能 a 开发到一半，需要将功能 b 优先级提前，功能 a 暂时搁置，但要删掉后重新开始吗？但功能 a 后面还是要完成的。因此，考虑将功能 a 暂存，重新开始开发功能 b。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git add . &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;Pause a&amp;#34;&lt;/span> // 暂存功能 a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout branch -b b // 新建分支 b（需要删除功能 a 相关代码，只保留项目基本框架）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>git add .&lt;/code> ：此项目（准确来说是当前文件夹）的所有变更都添加进来&lt;/p>
&lt;p>&lt;code>git commit -m &amp;quot;Pause a&amp;quot;&lt;/code>：为此次变更生成一个版本并添加信息记录变更内容&lt;/p>
&lt;p>此时回顾上一小节，如果当初 master 分支只有基本的项目框架，开发功能 a 时新建分支 feature/a 是否更合理？&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>项目要赶进度，协调新同事来完成功能 a&lt;/li>
&lt;/ul>
&lt;p>两个人该怎么协同合作一块完成项目呢？将代码拷贝一份给同事吗？但这样两个人如果修改了同一份文件，到时怎么合并？怎么确认同事只在分支 a 上完成？能否提供一个公共目录，自己和同事的项目都可以随时与其同步？&lt;/p>
&lt;p>这就是远程仓库（remote）：远程仓库是一个部署在服务器上的代码仓库，供多人协作完成项目，可以随时推送（push）和拉取（pull）源码。&lt;/p>
&lt;p>推送项目到远程仓库：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git remote add origin https://github.com/xxx/P // 关联远程仓库地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add . &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;Finish xxx func&amp;#34;&lt;/span> // 保存分支 b 的项目进度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout master // 切换到分支 master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin --set-upstream master // 关联本地分支 master 和远程仓库的 master （分支需要一一对应，分支名称最好保持一致，避免引起歧义）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout b // 继续开发功能 b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>origin&lt;/code> 是地址 &lt;code>https://github.com/xxx/P&lt;/code> 的简称，这表示一个项目可以有多个远程仓库地址（免费版 &amp;amp;&amp;amp; 收费版）&lt;/p>
&lt;p>&lt;code>git checkout [分支名]&lt;/code>：根据分支名进行分支切换&lt;/p>
&lt;p>&lt;code>git push origin --set-upstream [分支名]&lt;/code>：将本地分支推送到 &lt;code>origin/[分支名]&lt;/code> 并进行关联&lt;/p>&lt;/blockquote>
&lt;p>同事拉取项目并继续开发功能 a&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone https://github.com/xxx/P // 使用 clone 命令将项目从远程仓库复制到本地
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -b a // 在 master 分支上新建分支 a 继续开发功能 a（新建分支 a 与分支 b 对应，互不影响）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>clone 到本地的项目默认分支一般为 master（可以在远程仓库中设置）&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>功能 a 和 b 开发的差不多了，要开始合并为一个分支并上线。该怎么操作呢？先将分支 a 合并到 master，然后再将分支 b 合并过去，如果两个分支更改了同一份文件，就需要解决文件更改冲突的问题了。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git checkout master // 切换到分支 master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge origin/a // 合并分支 a 并解决冲突（假设分支 a 和 分支 b 都已经推送到远程仓库了）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge origin/b // 合并 分支 b 并解决冲突
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>合并期间 master 分支不稳定（不确定会不会有分支冲突）&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>此时 master 分支可以去提测了，在提测的时候需要继续开发功能 c，该怎么做？&lt;/li>
&lt;/ul>
&lt;p>继续在 master 分支上进行修改吗？虽然可以，但不建议这么做：&lt;/p>
&lt;ul>
&lt;li>测试出现问题时需要修复&lt;/li>
&lt;li>万一又有新功能 d 需要实现呢&lt;/li>
&lt;/ul>
&lt;p>所以应该在 master 上新建分支 c 进行开发。同时在提测后应该暂时冻结分支 master，避免测试发现问题后找不到对应的版本。那么有什么好办法用于冻结分支 master 呢？不妨使用 git tag 命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git tag v0.0.1-rc.01 // 首个版本提测
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其实上述方法中有些操作可以改进：&lt;/p>
&lt;ul>
&lt;li>一开始就在 master 上新建分支 a 进行开发&lt;/li>
&lt;li>为保持 master 分支的稳定，引入新分支 develop 充当 master 分支的不稳定版本（预览版本）&lt;/li>
&lt;li>规范分支名称&lt;/li>
&lt;/ul>
&lt;p>&lt;code>master&lt;/code>：主分支。维护项目稳定代码，每个&lt;code>tag&lt;/code>都表示一个稳定的服务版本。&lt;/p>
&lt;p>&lt;code>develop&lt;/code>：开发分支。用于 checkout [功能|修复]分支和 merge [功能|修复]分支。&lt;code>develop&lt;/code> 分支测试无误后就可以合并到 master 分支并上线。&lt;/p>
&lt;p>&lt;code>feature&lt;/code>：功能分支。用于开发新功能。&lt;/p>
&lt;p>&lt;code>fix&lt;/code>：修复分支。用于修复 &lt;code>develop&lt;/code> 分支在测试时遇到的问题。&lt;/p>
&lt;p>重新梳理后，可以按如下方式进行：&lt;/p>
&lt;!-- ```mermaid
%%{init:{ "logLevel":"debug", "gitGraph":{ "showBranches":true, "showCommitLabel":true, "mainBranchName":"master" }}}%%
gitGraph
commit id: "初始提交"
branch develop
commit id: "创建 develop 分支"
branch feature/name
commit id: "开发新功能 🚀"
commit id: "功能完成 ✅"
checkout develop
merge feature/name tag: "合并新功能"
branch fix/bug
commit id: "修复 Bug 🛠️"
commit id: "测试通过 🔍"
checkout develop
merge fix/bug tag: "合并修复"
checkout master
merge develop tag: "发布新版本 🎉"
commit id: "tag v0.0.1"
``` -->
&lt;p>&lt;img src="https://haxung.github.io/p/git-%E7%AE%80%E4%BB%8B/GitGraph.png"
width="1345"
height="569"
srcset="https://haxung.github.io/p/git-%E7%AE%80%E4%BB%8B/GitGraph_hu_f4318248f71f2a3c.png 480w, https://haxung.github.io/p/git-%E7%AE%80%E4%BB%8B/GitGraph_hu_40f196891f518c1.png 1024w"
loading="lazy"
alt="GitGraph"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>&lt;/p>
&lt;p>上述流程是一个比较流行的 Git 分支和项目开发流程，但也需要考虑如下情况：&lt;/p>
&lt;ul>
&lt;li>在 &lt;code>develop&lt;/code> 分支测试时，此时 &lt;code>feature&lt;/code> 分支能否合并进来？如果合并进来后该怎么处理可能存在的 &lt;code>fix&lt;/code> 分支？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>方案一：feature 分支要在 develop 分支测试完成后再合并&lt;/p>
&lt;p>方案二：feature 分支合并进 develop 分支后重新提测&lt;/p>
&lt;p>方案三：放松片刻，不用着急开发新功能&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>如果线上服务出现问题需要修复，该怎么做？&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在 master 分支上 checkout 一个 fix 分支修复线上问题，测试无误后合并到 master 分支，然后将 mater 分支合并到 develop 分支。&lt;/p>&lt;/blockquote>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>其他常用命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git status // 查看当前 git 状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git diff aaa bbb // 对比 aaa 和 bbb 的区别
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git fetch // 更新远程仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git restore xxx // 还原 xxx 文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rebase -i xxx // 回滚代码到指定版本
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>名词解释：&lt;/p>
&lt;ul>
&lt;li>工作区：修改后没有执行 &lt;code>git add xxx&lt;/code> 命令，可还原（git restore xxx）&lt;/li>
&lt;li>暂存区：&lt;code>git add xxx&lt;/code> 后文件从工作区转移到暂存区，可撤销（git restore &amp;ndash;staged xxx）&lt;/li>
&lt;li>本地仓库：&lt;code>git commit -m &amp;quot;xxx&amp;quot;&lt;/code> 后文件从暂存区转移到本地仓库，可回滚（git reset xxx 或 git rebase xxx）&lt;/li>
&lt;/ul>
&lt;p>以上只是 Git 工具和命令的基础部分，还有很多其他优秀的功能和命令，因本人精力有限，无法在此详细编写，特此推荐以下优秀书籍和项目：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener"
>Pro Git&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/git/git" target="_blank" rel="noopener"
>Git 源码&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://ohmygit.org/" target="_blank" rel="noopener"
>Oh My Git!&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/pcottle/learnGitBranching" target="_blank" rel="noopener"
>learnGitBranching&lt;/a>&lt;/p>&lt;/blockquote></description></item></channel></rss>